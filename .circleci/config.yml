# Java Maven CircleCI 2.0 configuration file
#
#
version: 2
jobs:
  style-check:
    docker:
      - image: circleci/golang:1.13.0

    working_directory: ~/cassandra-operator
    steps:
      - checkout
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Update go stuff
          command: go get golang.org/x/tools/cmd/goimports && go mod download

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Check go formatting
          command: |
            files=$(goimports -l .)
            if [ -n "$files" ]; then
              echo "The following file(s) are not properly formatted or their imports are misaligned. Run go fmt/go imports on your code:"
              echo "$files"
              exit 1
            fi
  build:
    docker:
      # specify the version you desire here
      - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
        auth:
          username: _json_key
          password: $GOOGLE_AUTH

    working_directory: ~/cassandra-operator

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - m2
            - go-mod-v4-{{ checksum "go.sum" }}

      - setup_remote_docker:
          docker_layer_caching: true

      - run: make

      - save_cache:
          key: m2
          paths:
            - ~/.m2
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  release:
    docker:
      # specify the version you desire here
      - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
        auth:
          username: _json_key
          password: $GOOGLE_AUTH

    working_directory: ~/cassandra-operator

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run:
          name: Set TAG environment to version
          command: |
            TAG=$(git tag --points-at master | tail -n 1)
            if [[! -z "${TAG}" ]]; then
                echo "export TAG=${TAG}" >> $BASH_ENV
                source $BASH_ENV
            else
                echo "The last commit on master doesn't seem to be tagged! Not releasing"
                exit 1
            fi

      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - m2
            - go-mod-v4-{{ checksum "go.sum" }}


      # Download and cache dependencies
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      - run:
          name: Setup Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - setup_remote_docker:
          docker_layer_caching: true


      - run:
          name: Create Docker images
          command: ./buildenv/build-all

      - run:
          name: Release docker images
          command: ./buildenv/release-all

  test-gcp:
    docker:
          # specify the version you desire here
          - image: gcr.io/cassandra-operator/jdk8-gcloud-sdk:latest
            auth:
              username: _json_key
              password: $GOOGLE_AUTH

    working_directory: ~/cassandra-operator

    environment:
          # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      - run:
          name: Setup Google Cloud
          command: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json && gcloud --quiet config set project ${GOOGLE_PROJECT_ID} && gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}

      - run:
          name: Setup K8s cluster and Credentials
          command: gcloud --quiet container clusters create ${K8S_CLUSTER_NAME} && gcloud --quiet container clusters get-credentials ${K8S_CLUSTER_NAME}

      - run:
          name: Set up helm
          command: ./test/configurehelm

      - run:
          name: Deploy Operator
          command: ./test/deployoperator && sleep 30

      - run:
          name: Run integration tests
          command: export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json; ./test/gcptests

      - run:
          name: Cleanup GCP resources
          command: gcloud --quiet container clusters delete ${K8S_CLUSTER_NAME} --async
          when: always

workflows:
  version: 2
  build_and_test:
    jobs:
      - style-check
      - build:
          requires:
            - style-check
          filters:
            branches:
              ignore:
                - master
      - test-gcp:
          requires:
            - style-check
          filters:
            branches:
                # Don't run the test on PRs
                ignore:
                  - /^pull\/.*/
      - release:
          requires:
            - style-check
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+$/
            branches:
              only: master
